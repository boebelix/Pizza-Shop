buildscript {
	repositories {
		mavenCentral()
		maven {
			name = 'Sonatype Nexus Snapshots'
			url = 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
	dependencies {
		classpath "io.openliberty.tools:liberty-gradle-plugin:${libertyPluginVersion}"
	}
}

plugins {
	id 'com.bmuschko.docker-remote-api' version '6.6.1'
}


apply plugin: 'java'
apply plugin: 'liberty'
apply plugin: 'war'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

war {
	archiveName("logisticsService.war")
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
	implementation project(path: ':apps:microprofile-commons')

	implementation "org.eclipse.microprofile:microprofile:${micoprofileVersion}"
}


import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task createDockerfile(type: Dockerfile) {
	from 'open-liberty'
	instruction  'COPY --chown=1001:0 ./build/libs/logisticsService.war /config/apps/logisticsService.war'
	instruction  'COPY --chown=1001:0 ./src/main/liberty/config/ /config/'
	instruction  'COPY --chown=1001:0 ./docker/configOverrides /config/configDropins/overrides/'
	environmentVariable 'USER_SERVICE_PASSWORD', 'ferwfrwe435gsd'
	environmentVariable 'USER_SERVICE_PATH', 'http://localhost:9080'
	instruction  'RUN configure.sh'
}

task buildImage(type: DockerBuildImage) {
	dependsOn createDockerfile, build
	inputDir = project.projectDir
	dockerFile = createDockerfile.destFile
	images.add('ateam/logisticsservice:latest')
}

task createContainer(type: DockerCreateContainer) {
	dependsOn buildImage
	targetImageId buildImage.getImageId()
	containerName = 'aTeamLogisticsService'
	hostConfig.portBindings = ["${logisticsServiceDevDockerHttpPort}:9080", "${logisticsServiceDevDockerHttpsPort}:9443"]
}
